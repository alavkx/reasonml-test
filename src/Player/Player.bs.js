// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReactUse = require("react-use");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Util$ReactHooksTemplate = require("../Util.bs.js");
var Library$ReactHooksTemplate = require("../Library/Library.bs.js");

require("./Player.css");

function Player(Props) {
  var tracks = Props.tracks;
  var match = React.useReducer((function (state, $$event) {
          return /* record */[
                  /* status */state[/* status */0],
                  /* activeTrackIndex */$$event[0]
                ];
        }), /* record */[
        /* status : Stopped */0,
        /* activeTrackIndex */undefined
      ]);
  var send = match[1];
  var match$1 = match[0][/* activeTrackIndex */1];
  var match$2 = ReactUse.useAudio({
        src: match$1 !== undefined ? Caml_array.caml_array_get(tracks, match$1)[/* src */2] : "",
        autoPlay: false
      });
  var controls = match$2[2];
  var playerState = match$2[1];
  return React.createElement(React.Fragment, undefined, React.createElement(Library$ReactHooksTemplate.make, {
                  tracks: tracks,
                  playTrack: (function (i) {
                      return Curry._1(send, /* PlayTrack */[i]);
                    })
                }), React.createElement("section", {
                  "aria-label": "player",
                  onKeyDown: (function (e) {
                      var match = e.key;
                      switch (match) {
                        case "ArrowLeft" : 
                            return controls.seek(playerState.time - 5.0);
                        case "ArrowRight" : 
                            return controls.seek(playerState.time + 5.0);
                        default:
                          return /* () */0;
                      }
                    })
                }, React.createElement("div", {
                      className: "controls"
                    }, match$2[0], React.createElement("button", {
                          onClick: (function (_e) {
                              return controls.pause();
                            })
                        }, Util$ReactHooksTemplate.str("Pause")), React.createElement("button", {
                          onClick: (function (_e) {
                              controls.play();
                              return /* () */0;
                            })
                        }, Util$ReactHooksTemplate.str("Play")), React.createElement("button", {
                          onClick: (function (_e) {
                              return controls.mute();
                            })
                        }, Util$ReactHooksTemplate.str("Mute")), React.createElement("button", {
                          onClick: (function (_e) {
                              return controls.unmute();
                            })
                        }, Util$ReactHooksTemplate.str("Un-mute")), React.createElement("input", {
                          max: "1",
                          min: 0,
                          step: 0.01,
                          type: "range",
                          onChange: (function (e) {
                              return controls.volume(e.target.value);
                            })
                        }))));
}

var make = Player;

exports.make = make;
/*  Not a pure module */
