// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Util$ReactHooksTemplate = require("../Util.bs.js");

require("./Library.css");

function getPosition(index, xs) {
  if (index !== 0) {
    if (index >= (xs.length - 1 | 0)) {
      return /* Last */2;
    } else {
      return /* Middle */1;
    }
  } else {
    return /* First */0;
  }
}

function handleKeyboardEvent(e) {
  var match = e.key;
  switch (match) {
    case "ArrowDown" : 
        return /* Next */0;
    case "ArrowUp" : 
        return /* Previous */1;
    case "Enter" : 
        return /* TriggerEffect */2;
    default:
      return /* DoNothing */3;
  }
}

function Library(Props) {
  var tracks = Props.tracks;
  var playTrack = Props.playTrack;
  var match = React.useReducer((function (state, $$event) {
          var match = state[/* status */1];
          var exit = 0;
          var exit$1 = 0;
          if (typeof $$event === "number") {
            if ($$event >= 2) {
              return state;
            } else {
              switch (match) {
                case 0 : 
                    if ($$event !== 0) {
                      return state;
                    } else {
                      exit = 1;
                    }
                    break;
                case 1 : 
                    exit$1 = 2;
                    break;
                case 2 : 
                    if ($$event !== 0) {
                      exit$1 = 2;
                    } else {
                      return state;
                    }
                    break;
                
              }
            }
          } else {
            var i = $$event[0];
            return /* record */[
                    /* focusedTrackIndex */i,
                    /* status */getPosition(i, tracks)
                  ];
          }
          if (exit$1 === 2) {
            if ($$event !== 0) {
              var nextId = state[/* focusedTrackIndex */0] - 1 | 0;
              return /* record */[
                      /* focusedTrackIndex */nextId,
                      /* status */getPosition(nextId, tracks)
                    ];
            } else {
              exit = 1;
            }
          }
          if (exit === 1) {
            var nextId$1 = state[/* focusedTrackIndex */0] + 1 | 0;
            return /* record */[
                    /* focusedTrackIndex */nextId$1,
                    /* status */getPosition(nextId$1, tracks)
                  ];
          }
          
        }), /* record */[
        /* focusedTrackIndex */0,
        /* status : First */0
      ]);
  var send = match[1];
  var state = match[0];
  return React.createElement("table", {
              className: "library",
              tabIndex: 0,
              onKeyDown: (function (e) {
                  var x = handleKeyboardEvent(e);
                  if (typeof x === "number" && x === 2) {
                    return Curry._1(playTrack, state[/* focusedTrackIndex */0]);
                  } else {
                    return Curry._1(send, x);
                  }
                })
            }, $$Array.mapi((function (i, param) {
                    var match = state[/* focusedTrackIndex */0] === i;
                    return React.createElement("tr", {
                                key: String(i),
                                style: {
                                  backgroundColor: match ? "blue" : "white"
                                },
                                onClick: (function (param) {
                                    return Curry._1(send, /* FocusRow */[i]);
                                  }),
                                onDoubleClick: (function (param) {
                                    return Curry._1(playTrack, i);
                                  })
                              }, React.createElement("td", undefined, Util$ReactHooksTemplate.str(param[/* artist */1])), React.createElement("td", undefined, Util$ReactHooksTemplate.str(param[/* name */0])));
                  }), tracks));
}

var make = Library;

exports.getPosition = getPosition;
exports.handleKeyboardEvent = handleKeyboardEvent;
exports.make = make;
/*  Not a pure module */
