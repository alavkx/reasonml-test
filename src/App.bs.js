// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_array = require("bs-platform/lib/js/caml_array.js");

function str(prim) {
  return prim;
}

var tracks = /* array */[
  /* record */[
    /* name */"007",
    /* artist */"Kromestar"
  ],
  /* record */[
    /* name */"008",
    /* artist */"Kromestar"
  ],
  /* record */[
    /* name */"009",
    /* artist */"Kromestar"
  ],
  /* record */[
    /* name */"010",
    /* artist */"Kromestar"
  ],
  /* record */[
    /* name */"011",
    /* artist */"Kromestar"
  ],
  /* record */[
    /* name */"012",
    /* artist */"Kromestar"
  ],
  /* record */[
    /* name */"013",
    /* artist */"Kromestar"
  ]
];

function getPosition(index, xs) {
  if (index !== 0) {
    if (index >= (xs.length - 1 | 0)) {
      return /* Last */2;
    } else {
      return /* Middle */1;
    }
  } else {
    return /* First */0;
  }
}

function keyboardEvent(e) {
  var match = e.key;
  switch (match) {
    case "ArrowDown" : 
        return /* Next */0;
    case "ArrowUp" : 
        return /* Previous */1;
    default:
      return /* DoNothing */3;
  }
}

function App(Props) {
  var match = React.useReducer((function (state, $$event) {
          var match = state[/* rowStatus */1];
          var exit = 0;
          var exit$1 = 0;
          var exit$2 = 0;
          if (typeof $$event === "number") {
            switch ($$event) {
              case 0 : 
              case 1 : 
                  exit$2 = 3;
                  break;
              case 2 : 
                  return /* record */[
                          /* selectedRowIndex */state[/* selectedRowIndex */0],
                          /* rowStatus */state[/* rowStatus */1],
                          /* activeTrackIndex */state[/* activeTrackIndex */2],
                          /* playing */!state[/* playing */3]
                        ];
              case 3 : 
                  return state;
              
            }
          } else if ($$event.tag) {
            return /* record */[
                    /* selectedRowIndex */state[/* selectedRowIndex */0],
                    /* rowStatus */state[/* rowStatus */1],
                    /* activeTrackIndex */$$event[0],
                    /* playing */state[/* playing */3]
                  ];
          } else {
            var index = $$event[0];
            return /* record */[
                    /* selectedRowIndex */index,
                    /* rowStatus */getPosition(index, tracks),
                    /* activeTrackIndex */state[/* activeTrackIndex */2],
                    /* playing */state[/* playing */3]
                  ];
          }
          if (exit$2 === 3) {
            switch (match) {
              case 0 : 
                  if ($$event !== 0) {
                    return state;
                  } else {
                    exit = 1;
                  }
                  break;
              case 1 : 
                  exit$1 = 2;
                  break;
              case 2 : 
                  if ($$event !== 0) {
                    exit$1 = 2;
                  } else {
                    return state;
                  }
                  break;
              
            }
          }
          if (exit$1 === 2) {
            if ($$event !== 0) {
              var nextId = state[/* selectedRowIndex */0] - 1 | 0;
              return /* record */[
                      /* selectedRowIndex */nextId,
                      /* rowStatus */getPosition(nextId, tracks),
                      /* activeTrackIndex */state[/* activeTrackIndex */2],
                      /* playing */state[/* playing */3]
                    ];
            } else {
              exit = 1;
            }
          }
          if (exit === 1) {
            var nextId$1 = state[/* selectedRowIndex */0] + 1 | 0;
            return /* record */[
                    /* selectedRowIndex */nextId$1,
                    /* rowStatus */getPosition(nextId$1, tracks),
                    /* activeTrackIndex */state[/* activeTrackIndex */2],
                    /* playing */state[/* playing */3]
                  ];
          }
          
        }), /* record */[
        /* selectedRowIndex */0,
        /* rowStatus : First */0,
        /* activeTrackIndex */undefined,
        /* playing */false
      ]);
  var dispatch = match[1];
  var state = match[0];
  var match$1 = state[/* playing */3];
  var match$2 = state[/* activeTrackIndex */2];
  return React.createElement(React.Fragment, undefined, React.createElement("table", {
                  tabIndex: 0,
                  onKeyDown: (function (e) {
                      return Curry._1(dispatch, keyboardEvent(e));
                    })
                }, $$Array.mapi((function (i, param) {
                        var match = state[/* selectedRowIndex */0] === i;
                        return React.createElement("tr", {
                                    key: String(i),
                                    style: {
                                      backgroundColor: match ? "blue" : "white"
                                    },
                                    onClick: (function (param) {
                                        return Curry._1(dispatch, /* FocusRow */Block.__(0, [i]));
                                      }),
                                    onDoubleClick: (function (param) {
                                        return Curry._1(dispatch, /* PlayTrack */Block.__(1, [i]));
                                      })
                                  }, React.createElement("td", undefined, param[/* artist */1]), React.createElement("td", undefined, param[/* name */0]));
                      }), tracks)), React.createElement("nav", undefined, React.createElement("section", {
                      "aria-label": "player"
                    }, React.createElement("audio", {
                          controls: true
                        }, React.createElement("source", {
                              src: "viper.mp3",
                              type: "audio/mp3"
                            }), React.createElement("p", undefined, "Your browser doesn't support HTML5 video. Here is a ", React.createElement("a", {
                                  href: "rabbit320.mp4"
                                }, "link to the video "), "instead.")), React.createElement("div", {
                          className: "controls"
                        }, React.createElement("button", {
                              className: "playpause",
                              onClick: (function (param) {
                                  return Curry._1(dispatch, /* TogglePlaying */2);
                                })
                            }, match$1 ? "Pause" : "Play"), React.createElement("button", {
                              className: "stop"
                            }, "Stop"), React.createElement("button", {
                              className: "rwd"
                            }, "Rwd"), React.createElement("button", {
                              className: "fwd"
                            }, "Fwd"), React.createElement("div", {
                              className: "time"
                            }, "00:00"))), React.createElement("main", undefined, match$2 !== undefined ? "Now playing: " + Caml_array.caml_array_get(tracks, match$2)[/* name */0] : "Play a song, stupid")));
}

var make = App;

exports.str = str;
exports.tracks = tracks;
exports.getPosition = getPosition;
exports.keyboardEvent = keyboardEvent;
exports.make = make;
/* react Not a pure module */
